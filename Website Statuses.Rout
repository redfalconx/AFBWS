
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Created by Andrew Russell, 2017.
> # These packages are used at various points: 
> # install.packages("data.table", "readxl", "dplyr", "tidyr")
> 
> ## This script will pull statuses from each program area to automate the website statuses
> 
> #### Load packages ####
> library(data.table) # converts to data tables
> library(readxl) # reads Excel files
> library(dplyr) # data manipulation

Attaching package: 'dplyr'

The following objects are masked from 'package:data.table':

    between, first, last

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(tidyr) # a few pivot-table functions
> library(RCurl) #  push to ftp server
Loading required package: bitops

Attaching package: 'RCurl'

The following object is masked from 'package:tidyr':

    complete

> 
> wd = dirname(getwd())
> 
> #### Fetch Data ####
> ### Master Factory List ###
> # Fetch the Master table from the Excel spreadsheet and put the results in a dataframe
> Master <- read_excel("C:/Users/Andrew/Box Sync/Alliance Factory info sheet/Master Factory Status/MASTER Factory Status.xlsx", "Master Factory List", col_types = "text")
> Master = Master[complete.cases(Master$`Account ID`),]
> Master = Master[, c("Account Name", "Account ID", "Remediation Factory Status", "Inspected by Alliance / Accord / All&Acc")]
> 
> 
> ### Training ###
> # Fetch the Train the Trainer table from the Excel spreadsheet and put the results in a dataframe
> Training <- read_excel("C:/Users/Andrew/Box Sync/Training and Worker Empowerment Programs/7. Training Implementation Trackers/Basic Fire Safety & Helpline Training Implementation.xlsx", 1, col_types = "text")
> Training = Training[complete.cases(Training$`Account ID`),]
> Training = Training[complete.cases(Training$`Training Phase`),]
> Training = Training[, c("Account ID", "Training Phase", "STATUS", "Helpline Comment")]
> 
> 
> ### Security Guard Training ###
> # Fetch the Security Guard Training table from the Excel spreadsheet and put the results in a dataframe
> SG_Training <- read_excel("C:/Users/Andrew/Box Sync/Training and Worker Empowerment Programs/7. Training Implementation Trackers/Security Guard Training Implementation.xlsx", 1, col_types = "text")
> SG_Training = SG_Training[complete.cases(SG_Training$`Account ID`),]
> SG_Training = SG_Training[, c("Account ID", "Training Phase", "STATUS")]
> 
> 
> ### Safety Committees ###
> # Fetch the Safety Committees table from the Excel spreadsheet and put the results in a dataframe
> SC <- read_excel("C:/Users/Andrew/Box Sync/Training and Worker Empowerment Programs/7. Training Implementation Trackers/SC Implementation.xlsx", 1, col_types = "text")
> SC = SC[complete.cases(SC$`Account ID`),]
> SC = SC[, c("Account ID", "Status")]
> 
> 
> #### Rename Statuses ####
> ### Master Factory List ###
> # Change "Subs. Complete" to "Completed"
> Master$`Remediation Factory Status`[grepl("Subs", Master$`Remediation Factory Status`, ignore.case = TRUE) == TRUE] = "Completed"
> 
> # Change from "Completed Under Accord" to "Completed"
> Master$`Remediation Factory Status`[grepl("completed", Master$`Remediation Factory Status`, ignore.case = TRUE) == TRUE] = "Completed"
> 
> table(Master$`Remediation Factory Status`, useNA = "ifany")

                  Completed                    Critical 
                        203                          16 
Expansion of a new building          Needs intervention 
                          6                         171 
                        New                    On track 
                         35                         160 
                Pending RVV                     Removed 
                         38                         116 
                  Suspended                Under Accord 
                        160                         230 
> 
> 
> ### Helpline ###
> # Sort by Training Phase
> Training$`Training Phase`[Training$`Training Phase` == "3a"] <- "3"
> Training$`Training Phase`[Training$`Training Phase` == "4a"] <- "4"
> Training$`Training Phase` <- as.numeric(Training$`Training Phase`)
> Training = arrange(Training, desc(`Training Phase`))
> 
> # Create Helpline column with "Not started" as default
> Helpline = Training
> Helpline$Helpline = "Not started"
> 
> # If in Helpline pilot, then status is "Completed"
> Helpline$Helpline[grepl("pilot", Training$`Helpline Comment`, ignore.case = TRUE) == TRUE] = "Completed"
> 
> # If in anything but phase 1 or blank, then status is "Completed"
> Helpline$Helpline[Helpline$`Training Phase` == 2] = "Completed"
> Helpline$Helpline[Helpline$`Training Phase` == 3] = "Completed"
> Helpline$Helpline[Helpline$`Training Phase` == 4] = "Completed"
> 
> # Subset, and remove duplicates
> Helpline = distinct(Helpline, `Account ID`, .keep_all = TRUE)
> Helpline = Helpline[, c("Account ID", "Helpline")]
> table(Helpline$Helpline, useNA = "ifany")

  Completed Not started 
        936          91 
> 
> 
> ### Training ###
> # If factory is in phase 3 or 4 and had phase 1 or 2, remove phase 1 or 2 rows
> Training = distinct(Training, `Account ID`, .keep_all = TRUE)
> Training$`Refresher Training` = "No"
> Training$`Refresher Training`[Training$`Training Phase` == 3] = "Yes"
> Training$`Refresher Training`[Training$`Training Phase` == 4] = "Yes"
> 
> Training = Training[, c("Account ID", "STATUS", "Refresher Training")]
> setnames(Training, "STATUS", "Training Status")
> 
> # If status is "critical" or "unwilling", then "Critical"
> Training$`Training Status`[grepl("critical", Training$`Training Status`, ignore.case = TRUE) == TRUE | grepl("unwilling", Training$`Training Status`, ignore.case = TRUE) == TRUE] = "Critical"
> 
> # If status is "not on track", then "Needs intervention"
> Training$`Training Status`[grepl("not on track", Training$`Training Status`, ignore.case = TRUE) == TRUE] = "Needs intervention"
> 
> # If status is "on track", then "On track"
> Training$`Training Status`[grepl("on track", Training$`Training Status`, ignore.case = TRUE) == TRUE] = "On track"
> 
> # If status is "schedule" or "not started", then "Not started"
> Training$`Training Status`[grepl("schedule", Training$`Training Status`, ignore.case = TRUE) == TRUE | grepl("not started", Training$`Training Status`, ignore.case = TRUE) == TRUE] = "Not started"
> 
> # If status is "complete", then "Completed"
> Training$`Training Status`[grepl("complete", Training$`Training Status`, ignore.case = TRUE) == TRUE] = "Completed"
> 
> table(Training$`Training Status`, useNA = "ifany")

                               Completed 
                                     733 
                                Critical 
                                     111 
Invited for Phase-4 but did not response 
                                       1 
                      Needs intervention 
                                       5 
                             Not started 
                                       5 
                                On track 
                                     172 
> 
> 
> ### SG Training ###
> # If factory is in phase 2 and had phase 1 , remove phase 1 rows
> SG_Training$`Training Phase` <- as.numeric(SG_Training$`Training Phase`)
> SG_Training = arrange(SG_Training, desc(`Training Phase`))
> SG_Training = distinct(SG_Training, `Account ID`, .keep_all = TRUE)
> SG_Training$`SG Refresher Training` = "No"
> SG_Training$`SG Refresher Training`[SG_Training$`Training Phase` == 2] = "Yes"
> 
> SG_Training = SG_Training[, c("Account ID", "STATUS", "SG Refresher Training")]
> setnames(SG_Training, "STATUS", "SG Training Status")
> 
> # If status is "critical" or "unwilling", then "Critical"
> SG_Training$`SG Training Status`[grepl("critical", SG_Training$`SG Training Status`, ignore.case = TRUE) == TRUE | grepl("unwilling", SG_Training$`SG Training Status`, ignore.case = TRUE) == TRUE] = "Critical"
> 
> # If status is "not on track", then "Needs intervention"
> SG_Training$`SG Training Status`[grepl("not on track", SG_Training$`SG Training Status`, ignore.case = TRUE) == TRUE] = "Needs intervention"
> 
> # If status is "on track", then "On track"
> SG_Training$`SG Training Status`[grepl("on track", SG_Training$`SG Training Status`, ignore.case = TRUE) == TRUE] = "On track"
> 
> # If status is "schedule" or "not started", then "Not started"
> SG_Training$`SG Training Status`[grepl("schedule", SG_Training$`SG Training Status`, ignore.case = TRUE) == TRUE | grepl("not started", SG_Training$`SG Training Status`, ignore.case = TRUE) == TRUE] = "Not started"
> 
> # If status is "complete", then "Completed"
> SG_Training$`SG Training Status`[grepl("complete", SG_Training$`SG Training Status`, ignore.case = TRUE) == TRUE] = "Completed"
> 
> table(SG_Training$`SG Training Status`, useNA = "ifany")

                                    Completed 
                                          771 
                                     Critical 
                                           34 
Invited for BFST Training but didn't response 
                                            1 
                           Needs intervention 
                                            1 
                                  Not started 
                                           13 
                                     On track 
                                          135 
> 
> 
> ### SC ###
> # If "elect" in status, change to "Needs WPC election"
> SC$Status[grepl("elect", SC$Status, ignore.case = TRUE) == TRUE] = "Needs WPC election"
> 
> # If "Ready for next TtT" in status, change to "Ready for training"
> SC$Status[grepl("Ready for next TtT", SC$Status, ignore.case = TRUE) == TRUE] = "Ready for training"
> 
> # If "on track" in status, change to "On track"
> SC$Status[grepl("on track", SC$Status, ignore.case = TRUE) == TRUE] = "On track"
> 
> # If "not assessed", blank, or starts with "Formal" in status, change to "Not assessed"
> SC$Status[grepl("not assessed", SC$Status, ignore.case = TRUE) == TRUE | grepl("Formal", SC$Status, ignore.case = FALSE) == TRUE | is.na(SC$Status) == TRUE] = "Not assessed"
> 
> # If "Not on track", "critical", or "form" in status, change to "Needs intervention"
> SC$Status[grepl("not on track", SC$Status, ignore.case = TRUE) == TRUE | grepl("critical", SC$Status, ignore.case = TRUE) == TRUE | grepl("form", SC$Status, ignore.case = TRUE) == TRUE] = "Needs intervention"
> 
> # If "Accord" in status, change to "Under Accord"
> SC$Status[grepl("accord", SC$Status, ignore.case = TRUE) == TRUE] = "Under Accord"
> 
> # If "completed" in status, change to "Completed"
> SC$Status[grepl("completed", SC$Status, ignore.case = TRUE) == TRUE] = "Completed"
> 
> # If not one of the above statuses, change to "Not assessed"
> SC$Status[grepl("Needs WPC election", SC$Status, ignore.case = TRUE) == FALSE & 
+             grepl("Ready for training", SC$Status, ignore.case = TRUE) == FALSE & 
+             grepl("On track", SC$Status, ignore.case = TRUE) == FALSE & 
+             grepl("Not assessed", SC$Status, ignore.case = TRUE) == FALSE &
+             grepl("Needs intervention", SC$Status, ignore.case = TRUE) == FALSE & 
+             grepl("Under Accord", SC$Status, ignore.case = TRUE) == FALSE &
+             grepl("Completed", SC$Status, ignore.case = TRUE) == FALSE] = "Not assessed"
> 
> setnames(SC, "Status", "SC Status")
> 
> #### Join tables ####
> Statuses = Master %>%
+   left_join(Training, by = "Account ID") %>%
+   left_join(SG_Training, by = "Account ID") %>%
+   left_join(Helpline, by = "Account ID") # %>%
>   # left_join(SC, by = "Account ID")
> 
> 
> #### Add new columns ####
> # Inspection column
> Statuses$Inspection = "Completed"
> Statuses$Inspection[Statuses$`Inspected by Alliance / Accord / All&Acc` == "New"] = "Not started"
> 
> # Overall Status column
> Statuses$`Overall Status` = "Participating"
> Statuses$`Overall Status`[Statuses$`Remediation Factory Status` == "Suspended"] = "Suspended"
> Statuses$`Overall Status`[Statuses$`Remediation Factory Status` == "Removed"] = "Removed"
> 
> 
> #### Reorder columns, remove /E, and missing values = "Not started" ####
> Statuses = Statuses[, c("Account ID", "Account Name", "Inspection", "Remediation Factory Status", "Training Status", "SG Training Status", "Helpline", #"SC Status", 
+                         "Overall Status", "Refresher Training", "SG Refresher Training")]
> Statuses$`Account ID` = as.numeric(Statuses$`Account ID`)
Warning message:
NAs introduced by coercion 
> Statuses = Statuses[complete.cases(Statuses$`Account ID`), ]
> Statuses[is.na(Statuses)] = "Not started"
> Statuses$`Refresher Training`[Statuses$`Refresher Training` == "Not started"] = "No"
> Statuses$`SG Refresher Training`[Statuses$`SG Refresher Training` == "Not started"] = "No"
> 
> 
> #### Save the txt file ####
> write.table(Statuses, "C:/Users/Andrew/Box Sync/FFC/Factory List/Monthly Website Lists/Status Lists/factory-statuses.txt", sep="\t", row.names=FALSE)
> 
> 
> #### Upload to FTP Server ####
> Sys.sleep(5)
> 
> ftpUpload("C:/Users/Andrew/Box Sync/FFC/Factory List/Monthly Website Lists/Status Lists/factory-statuses.txt", "ftp://infactor:7fr&Ez6NVLLE@www.afbws.org/public_html/alliance/files/factory-lists/factory-statuses.txt")
OK 
 0 
> 
> proc.time()
   user  system elapsed 
   1.90    0.43    8.68 
Error in gzfile(file, "wb") : cannot open the connection
Calls: sys.save.image -> save.image -> save -> gzfile
In addition: Warning message:
In gzfile(file, "wb") :
  cannot open compressed file '.RDataTmp', probable reason 'Permission denied'
Execution halted
Warning message:
In file.remove(outfile) :
  cannot remove file '.RDataTmp', reason 'No such file or directory'
